# -*- coding: utf-8 -*-
"""DL_assignment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_JjrwuS9YiwrY84a9np5uueec3mT0ULH
"""

import pandas as pd

from google.colab import files
uploaded = files.upload()

# Assuming the uploaded file is named 'housing.csv'
data = pd.read_csv('housing.csv')

# Display the first few rows of the dataset to ensure it loaded properly
data.head()

# Drop rows with missing values
data = data.dropna()

# Convert categorical features (if any) to dummy variables (One-Hot Encoding)
data = pd.get_dummies(data)

# Separate features and target
X = data.drop('median_house_value', axis=1)
y = data['median_house_value']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Build the neural network
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1)  # Output layer for regression
])

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50)

model.save('house_price_model.h5')

pip install Flask

!pip install Flask pyngrok

from flask import Flask, render_template, request
import numpy as np
from tensorflow.keras.models import load_model
from sklearn.preprocessing import StandardScaler
from pyngrok import ngrok
import threading

app = Flask(__name__)

# Load the saved model
model = load_model('house_price_model.h5')

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    features = [float(x) for x in request.form.values()]
    data = np.array([features])

    # Preprocess input (scaling)
    scaler = StandardScaler()
    data = scaler.fit_transform(data)

    # Get the prediction
    prediction = model.predict(data)

    return render_template('index.html', prediction_text=f'Predicted House Price: ${prediction[0][0]:,.2f}')

def run_app():
    app.run()

from pyngrok import ngrok

# Replace 'YOUR_NGROK_AUTH_TOKEN' with the token you copied
ngrok.set_auth_token('2lhuJFIv3RyxVhGf7QqaQ2VEHR8_56mMYVL2JJsMihrwLsTxL')

# Open a ngrok tunnel to the Flask app, explicitly specifying HTTP
public_url = ngrok.connect(addr='5000', proto='http')
print('Flask app is live at:', public_url)

from flask import Flask, render_template, request
import numpy as np
from tensorflow.keras.models import load_model
from sklearn.preprocessing import StandardScaler
import threading

app = Flask(__name__)

# Load the saved model
model = load_model('house_price_model.h5')

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    features = [float(x) for x in request.form.values()]
    data = np.array([features])

    # Preprocess input (scaling)
    scaler = StandardScaler()
    data = scaler.fit_transform(data)

    # Get the prediction
    prediction = model.predict(data)

    return render_template('index.html', prediction_text=f'Predicted House Price: ${prediction[0][0]:,.2f}')

def run_app():
    app.run()

# Start the Flask app in a new thread
thread = threading.Thread(target=run_app)
thread.start()

import os

# Create the 'templates' directory if it does not exist
if not os.path.exists('templates'):
    os.makedirs('templates')

# Create the index.html file
html_code = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>House Price Prediction</title>
</head>
<body>
    <h2>Predict House Price</h2>
    <form action="/predict" method="POST">
        <label>Median Income:</label><input type="text" name="MedInc"><br>
        <label>House Age:</label><input type="text" name="HouseAge"><br>
        <label>Average Rooms:</label><input type="text" name="AveRooms"><br>
        <label>Population:</label><input type="text" name="Population"><br>
        <label>Average Occupants:</label><input type="text" name="AveOccup"><br>
        <label>Latitude:</label><input type="text" name="Latitude"><br>
        <label>Longitude:</label><input type="text" name="Longitude"><br>
        <button type="submit">Predict</button>
    </form>

    {% if prediction_text %}
    <h3>{{ prediction_text }}</h3>
    {% endif %}
</body>
</html>
"""

with open('templates/index.html', 'w') as file:
    file.write(html_code)